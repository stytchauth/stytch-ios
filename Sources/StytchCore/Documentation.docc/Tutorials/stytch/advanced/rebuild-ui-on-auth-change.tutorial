@Tutorial(time: 5) {
    @Intro(title: "Rebuild your UI based on changes to auth status") {
        Stytch provides a combine publisher to enable you to reactively set up or tear down your UI when a user logs in or out of your app.
    }
    
    @Section(title: "Dynamically rebuild your UI") {
        @ContentAndMedia {
            <doc:Sessions/onAuthChange> is a publisher which will emit a value when the Optional session token changes between being present and being nil. 
        }
        
        @Steps {            
            @Step {
                Navigate to the root ViewController of your application.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-01.swift)
            }

            @Step {
                Import `Combine` and ``StytchCore``.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-02.swift)
            }

            @Step {
                Add an `authChangeCancellable` variable.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-03.swift)
            }
            
            @Step {
                In `viewDidload`, sink on (or subscribe to) the `onAuthChange` publisher.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-04.swift)
            }
            
            @Step {
                Map over the publisher to produce a new publisher of the current user.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-05.swift)
            }
            
            @Step {
                Override addChild function to add the child's view to the parent's.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-06.swift)
            }
            
            @Step {
                Add function to clean up children.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-07.swift)
            }
            
            @Step {
                Clean up children when transitioning between auth states.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-08.swift)
            }
            
            @Step {
                Dynamically select AuthenticatedViewController or UnauthenticatedViewController depending on the presence of the current user.
                
                @Code(name: "RootViewController.swift", file: 01-rebuild-ui-code-09.swift)
            }
        }
    }
}
