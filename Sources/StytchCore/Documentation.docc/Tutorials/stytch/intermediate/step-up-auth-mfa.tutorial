@Tutorial(time: 10) {
    @Intro(title: "Step up auth/MFA") {
        If your app has functionality which requires higher levels of security on certain screens vs others, you may want to consider using step-up authentication or MFA. This tutorial will teach you a simple way of doing this with Stytch.
    }
    
    @Section(title: "Utilizing a just-in-time second factor") {
        @ContentAndMedia {
            If your primary app authentication uses Email Magic Links, you might want to ensure the user has a recent SMS factor attached to their session before giving them access to adjust their account settings.
        }
        
        @Steps {
            @Step {
                Open a file for viewing and adjusting user settings.
                
                @Code(name: UserSettingsViewController.swift, file: 01-step-up-auth-mfa-01.swift)
            }

            @Step {
                Add a didTap handler for your `editSettingsButton`.
                
                @Code(name: UserSettingsViewController.swift, file: 01-step-up-auth-mfa-02.swift)
            }

            @Step {
                Add an `if` statement to check if there is an existing phone factor from the last 5 minutes attached to the current session.
                
                @Code(name: UserSettingsViewController.swift, file: 01-step-up-auth-mfa-03.swift)
            }

            @Step {
                In the body of the `if` block, send the user to the `EditSettingsViewController`.
                
                @Code(name: UserSettingsViewController.swift, file: 01-step-up-auth-mfa-04.swift)
            }

            @Step {
                Add an `else` block which initiates an SMS OTP.
                
                @Code(name: UserSettingsViewController.swift, file: 01-step-up-auth-mfa-05.swift)
            }

            @Step {
                After SMS OTP is initiated, send the user to an intermediate `OTPCodeVerificationViewController` with a success destination of the `EditSettingsViewController`.
                
                @Code(name: UserSettingsViewController.swift, file: 01-step-up-auth-mfa-06.swift)
            }
        }
    }

    @Section(title: "Confirm the one-time-code") {
        @ContentAndMedia {
            Upon sending an SMS one-time code, you'll want to present the user with some UI to allow them to confirm the code they received.
        }

        @Steps {
            @Step {
                Open the one-time-code verification controller.
                
                @Code(name: OTPCodeVerificationViewController.swift, file: 02-step-up-auth-mfa-01.swift)
            }

            @Step {
                Ensure the `codeTextField` has a `textContentType` of `.oneTimeCode`.

                @Code(name: OTPCodeVerificationViewController.swift, file: 02-step-up-auth-mfa-02.swift)
            }

            @Step {
                Add a `didSubmitCode` function.

                @Code(name: OTPCodeVerificationViewController.swift, file: 02-step-up-auth-mfa-03.swift)
            }

            @Step {
                Ensure your `submitButton` and `codeTextField` call the `didSubmitCode` function appropriately.

                @Code(name: OTPCodeVerificationViewController.swift, file: 02-step-up-auth-mfa-04.swift)
            }

            @Step {
                Call Stytch's <doc:StytchClient/OTP/authenticate(parameters:)-5ums0> function to verify the one-time code.

                @Code(name: OTPCodeVerificationViewController.swift, file: 02-step-up-auth-mfa-05.swift)
            }

            @Step {
                If the authentication succeeds, utilize the success callback to route the user to the original destination.

                @Code(name: OTPCodeVerificationViewController.swift, file: 02-step-up-auth-mfa-06.swift)
            }
        }
    }
}
