name: Generate and Publish Swift Package Documentation

on:
  workflow_call:
    inputs:
      os:
        description: The os to use for building. Must be 'macOS' or 'ubuntu'.
        required: true
        type: string
        default: ubuntu
      swift-version:
        description: The Swift version to use for building.
        required: true
        type: string
      organisation:
        description: The name of the organisation that has the repository to use for the documentation.
        required: true
        type: string
        default: ${{ github.repository_owner }}
      repository:
        description: The name of the repository to use for the documentation.
        required: true
        type: string
        default: ${{ github.event.repository.name }}
      pages-branch:
        description: The name of the branch to use for the documentation.
        required: true
        type: string
        default: gh-pages
      container-before-run:
        description: A command to run before the documentation is generated. This is only run if the documentation is generated in a container.
        required: false
        type: string
      xcode-destination:
        description: The Xcode destination to use for building. This is only used if the documentation is generated on macOS.
        required: false
        type: string

permissions:
  contents: write

jobs:
  basic-context:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      version-name: ${{ github.ref_name }}
      is-latest: ${{ steps.compare-tags.outputs.is-latest }}
      build-os: ${{ steps.builder.outputs.runner-os }}
      build-container: ${{ steps.builder.outputs.container }}
      xcode-version: ${{ steps.builder.outputs.xcode-version }}
      base-url: 'https://${{ inputs.organisation }}.github.io'
      base-path: ${{ inputs.repository }}
      version-path: ${{ inputs.repository }}/${{ github.ref_name }}
    steps:
      - uses: joutvhu/get-release@v1
        id: latest-release
        with:
          latest: true
          throwing: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Compare tags
        id: compare-tags
        env:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
          LATEST_TAG: ${{ steps.latest-release.outputs.tag_name }}
        run: |
          if [ "${REF_TYPE}" = 'tag' ] && [ "${REF_NAME}" = "${LATEST_TAG}" ]; then
            echo 'is-latest=true' >> "${GITHUB_OUTPUT}"
          else
            echo 'is-latest=false' >> "${GITHUB_OUTPUT}"
          fi
      - uses: sersoft-gmbh/oss-common-actions/swift/runner-setup-versions@main
        id: builder
        with:
          os: ${{ inputs.os }}
          swift-version: ${{ inputs.swift-version }}

  spm-context:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    container: swift:${{ inputs.swift-version }}
    outputs:
      package-dump: ${{ steps.dump-package.outputs.package-dump }}
    steps:
      - uses: actions/checkout@v4
      # We don't use a cache here, because SPM doesn't resolve dependencies when dumping packages.
      - name: Dump package
        id: dump-package
        shell: bash
        run: |
          delimiter="$(openssl rand -hex 8)"
          echo "package-dump<<${delimiter}" >> "${GITHUB_OUTPUT}"
          swift package dump-package >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

  generate-docs:
    needs:
      - basic-context
      - spm-context
    permissions:
      contents: read
    runs-on: ${{ needs.basic-context.outputs.build-os }}
    container: ${{ needs.basic-context.outputs.build-container }}
    strategy:
      matrix:
        target: ${{ fromJson(needs.spm-context.outputs.package-dump).products.*.targets.* }}
    steps:
      - uses: sersoft-gmbh/os-version-action@v3
        id: os-version
      - uses: maxim-lobanov/setup-xcode@v1
        if: ${{ runner.os == 'macOS' }}
        with:
          xcode-version: ${{ needs.basic-context.outputs.xcode-version }}
      - uses: sersoft-gmbh/swift-version-action@v3
        id: swift-version
      - name: Run before command
        if: ${{ runner.os != 'macOS' && inputs.container-before-run != '' }}
        run: ${{ inputs.container-before-run }}
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: ${{ runner.os != 'macOS' || inputs.xcode-destination == '' }}
        with:
          path: .build
          key: ${{ runner.os }}-${{ steps.os-version.outputs.version }}-spm-${{ steps.swift-version.outputs.version }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.os-version.outputs.version }}-spm-${{ steps.swift-version.outputs.version }}-
      - uses: actions/cache@v4
        if: ${{ runner.os == 'macOS' && inputs.xcode-destination != '' }}
        with:
          path: .derived-data
          key: ${{ runner.os }}-${{ steps.os-version.outputs.version }}-xcode-${{ steps.swift-version.outputs.version }}-${{ inputs.xcode-destination }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.os-version.outputs.version }}-xcode-${{ steps.swift-version.outputs.version }}-${{ inputs.xcode-destination }}-
      - uses: sersoft-gmbh/swifty-docs-action@v3
        env:
          ENABLE_DOCC_SUPPORT: '1'
          DOCC_JSON_PRETTYPRINT: 'YES'
        with:
          package-version: ${{ needs.basic-context.outputs.version-name }}
          targets: ${{ matrix.target }}
          use-xcodebuild: ${{ runner.os == 'macOS' && inputs.xcode-destination != '' }}
          xcodebuild-scheme: ${{ matrix.target }}
          xcodebuild-destination: ${{ inputs.xcode-destination }}
          other-xcodebuild-arguments: |
            -derivedDataPath
            .derived-data
          enable-inherited-docs: true
          enable-index-building: false
          transform-for-static-hosting: true
          hosting-base-path: ${{ needs.basic-context.outputs.version-path }}
          output: ${{ matrix.target }}-docs
      - name: Package docs
        env:
          TARGET: ${{ matrix.target }}
        run: tar -cvf "${TARGET}-docs.tar" "${TARGET}-docs"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-docs
          path: ${{ matrix.target }}-docs.tar
      # Necessary for cache action post run not to fail.
      - uses: sersoft-gmbh/oss-common-actions/containers/fix-permissions@main
        if: ${{ runner.os != 'macOS' || inputs.xcode-destination == '' }}
        with:
          paths: |
            .build
            Package.resolved
      - uses: sersoft-gmbh/oss-common-actions/containers/fix-permissions@main
        if: ${{ runner.os == 'macOS' && inputs.xcode-destination != '' }}
        with:
          paths: |
            .derived-data
            Package.resolved

  publish-docs:
    needs:
      - basic-context
      - spm-context
      - generate-docs
    permissions:
      contents: write
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ inputs.organisation }}/${{ inputs.repository }}/${{ inputs.pages-branch }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.pages-branch }}
          path: repository
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Extract tars
        run: find artifacts -name '*.tar' -execdir tar -xvf '{}' --strip-components 1 \; -delete
      - name: Merge documentations
        env:
          TARGETS: ${{ join(fromJson(needs.spm-context.outputs.package-dump).products.*.targets.*, ' ') }}
          DOCS_BASE_DIR: repository/${{ needs.basic-context.outputs.version-name }}
        run: |
          rm -rf "${DOCS_BASE_DIR}"
          is_first=1
          for target in $TARGETS; do
            if [ $is_first -eq 1 ]; then
              echo "Copying initial documentation for ${target}"
              cp -R "artifacts/${target}-docs" "${DOCS_BASE_DIR}"
              is_first=0
            else
              echo "Merging documentation for ${target}"
              cp -R "artifacts/${target}-docs/data/documentation/"* "${DOCS_BASE_DIR}/data/documentation/"
              cp -R "artifacts/${target}-docs/documentation/"* "${DOCS_BASE_DIR}/documentation/"
            fi
          done
          echo "Deleting non-mergable metadata.json"
          rm -f "${DOCS_BASE_DIR}/metadata.json"
      - name: Create version index
        working-directory: repository
        env:
          TARGET_DOCS_DIR: ${{ needs.basic-context.outputs.version-name }}/documentation
          INDEX_FILE: ${{ needs.basic-context.outputs.version-name }}/index.html
          BASE_URL: ${{ needs.basic-context.outputs.base-url }}/${{ needs.basic-context.outputs.version-path }}/documentation
          REPO_NAME: ${{ inputs.repository }}
        run: |
          target_count=0
          target_list=""
          single_target_name=""
          for target in $(ls "${TARGET_DOCS_DIR}"); do
            if [ -d "${TARGET_DOCS_DIR}/${target}" ]; then
              single_target_name="${target}"
              target_count=$((target_count+1))
              target_list="${target_list}<li><a href=\"${BASE_URL}/${target}\"><code>${target}</code> Documentation</a></li>"
            fi
          done
          if [ ${target_count} -gt 1 ]; then
          echo "Found ${target_count} targets. Generating list..."
          cat > "${INDEX_FILE}" <<EOF
          <!DOCTYPE html>
          <html>
             <head>
                <title>${REPO_NAME} Documentation</title>
             </head>
             <body>
                <ul>
                  ${target_list}
                </ul>
             </body>
          </html>
          EOF
          else
          echo "Found one target. Generating redirect file to target ${single_target_name}"
          cat > "${INDEX_FILE}" <<EOF
          <!DOCTYPE html>
          <html>
             <head>
                <title>${REPO_NAME} Documentation</title>
                <meta http-equiv="refresh" content="0; url=${BASE_URL}/${single_target_name}" />
             </head>
             <body>
                <p>Redirecting...</p>
             </body>
          </html>
          EOF
          fi
      - name: Create root index
        working-directory: repository
        env:
          REDIRECT_URL: ${{ needs.basic-context.outputs.base-url }}/${{ needs.basic-context.outputs.base-path }}/latest
          REPO_NAME: ${{ inputs.repository }}
        run: |
          cat > 'index.html' <<EOF
          <!DOCTYPE html>
          <html>
             <head>
                <title>${REPO_NAME} Documentation</title>
                <meta http-equiv="refresh" content="0; url=${REDIRECT_URL}" />
             </head>
             <body>
                <p>Redirecting...</p>
             </body>
          </html>
          EOF
      - name: Create latest symlink
        if: ${{ needs.basic-context.outputs.is-latest == 'true' }}
        working-directory: repository
        env:
          VERSION_NAME: ${{ needs.basic-context.outputs.version-name }}
        run: |
          rm -f 'latest'
          ln -s "${VERSION_NAME}" 'latest'
      - name: Push changes
        id: check-changes
        working-directory: repository
        env:
          VERSION_NAME: ${{ needs.basic-context.outputs.version-name }}
          BRANCH: ${{ inputs.pages-branch }}
        run: |
          if [ -z "$(git status --porcelain)" ]; then
            echo 'Nothing to do...'
            exit 0
          fi
          git config user.name 'GitHub Actions'
          git config user.email 'actions@noreply.github.com'
          git add .
          git commit -m "Deploy documentation for '${VERSION_NAME}'"
          git push origin "${BRANCH}"

  cleanup:
    needs:
      - generate-docs
      - publish-docs
    permissions: {}
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Artifacts
        uses: joutvhu/delete-artifact@v2