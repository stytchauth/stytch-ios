name: Test
on:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref != 'refs/heads/main' || github.run_number }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull') }}

jobs:

  test:
    runs-on: [ self-hosted, apple-silicon ]

    steps:

#     - uses: actions/checkout@v3

#     - name: Bootstrap
#       run: |
#         make setup
#         make tools

#     - name: Codegen
#       run: |
#         make codegen
#         if [[ ! -z $(git status --porcelain | grep -v 'Brewfile.lock.json\|Gemfile.lock') ]]; then
#           echo 'Codegen produced uncommitted changes. Commit changes and re-push.'
#           exit 1
#         fi

#     - name: Lint
#       run: make lint

#     - name: Clear DerivedData
#       run: rm -r ~/Library/Developer/Xcode/DerivedData/*

#     - run: xcode-select -p

#     - run: echo -n "$MACHINE_PW" | sudo -S xcodebuild -license accept
#       env:
#         MACHINE_PW: ${{ secrets.VIRTUAL_MACHINE_PW }}
    # - run: |
    #     ls /Applications | grep Xcode
    #     xcode-select -p
    # - run: cat $(xcode-select -p)/usr/bin/simctl
    # - run: echo $(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "/Library/Developer/PrivateFrameworks/CoreSimulator.framework/Versions/A/Resources/Info.plist" 2>&1)
    # - run: $(xcode-select -p)/usr/bin/xcodebuild -runFirstLaunch
    # - run: /Library/Developer/PrivateFrameworks/CoreSimulator.framework/Versions/A/Resources/bin/simctl help
    # - run: $(xcode-select -p)/usr/bin/simctl help
    - run: |
        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
        PROD=$(softwareupdate -l | grep "\*.*Command Line" | tail -n 1 | sed 's/^[^C]* //')
        softwareupdate -i "$PROD" --verbose;
    - run: xcrun simctl help

    - run: xcrun simctl diagnose

    - run: xcrun simctl list devices

#     - name: Erase simulators
#       run: |
#         xcrun simctl shutdown all && xcrun simctl erase all

    - name: Test macOS
      run: make test-macos

    - name: Test watchOS
      run: make test-watchos

    - name: Test tvOS
      run: make test-tvos

    - name: Test iOS
      run: make test-ios

    - name: Coverage
      run: |
        make coverage
        Scripts/generate-coverage-summary .coverage/lcov.json >> $GITHUB_STEP_SUMMARY

    - uses: actions/upload-artifact@v3
      with:
        name: Coverage
        path: .coverage/
