#! /usr/bin/env ruby

class String
  # colorization
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end
end

class Runner
  def run(port:)
    puts 'Starting server'

    system("echo #{ngrok_wildcard_url} | pbcopy")
    puts "\nNOTE: You must visit https://stytch.com/dashboard/redirect-urls and add `#{ngrok_wildcard_url}` as a signup/login Redirect URL before using magic links or OAuth. It's already been added to your clipboard.\n".yellow

    update_public_token_if_needed

    start_ngrok(port: port)

    @tunnel_url = fetch_tunnel_url
    while @tunnel_url&.empty? do
      sleep(0.1)
      @tunnel_url = fetch_tunnel_url
    end

    update_client_config(tunnel_url: @tunnel_url)

    start_server(port: port)
  end

  def cleanup
    puts 'Cleaning up server'
    system('pkill ngrok')
  end

  private

  def start_ngrok(port:)
    system("/usr/bin/env ngrok http #{port} > /dev/null &")
  end

  def fetch_tunnel_url
    %x(/usr/bin/env curl http://127.0.0.1:4040/api/tunnels --silent | jq -r '.tunnels[].public_url').strip
  end

  def app_id
    @app_id ||= %x(xcrun xcodebuild -quiet -showBuildSettings -project '#{demo_project_file}' -json -scheme 'StytchDemo (macOS)' | jq -r '.[0].buildSettings | "\\(.DEVELOPMENT_TEAM).\\(.PRODUCT_BUNDLE_IDENTIFIER)"').strip
  end

  def update_client_config(tunnel_url:)
    system("/usr/libexec/PlistBuddy -c 'set :StytchHostURL #{tunnel_url}' #{File.join(File.dirname(demo_project_file), "Client/Shared/StytchConfiguration.plist")}")
    [:iOS, :macOS].each do |client|
      update_applinks_entitlement(tunnel_url: tunnel_url, client: client)
    end
  end

  def update_applinks_entitlement(tunnel_url:,client:)
    system("/usr/libexec/PlistBuddy -c 'set :com.apple.developer.associated-domains:0 applinks:#{tunnel_url.sub('https://', '')}' #{File.join(File.dirname(demo_project_file), "Client/#{client}/#{client}.entitlements")}")
  end

  def start_server(port:)
    system("xcrun xcodebuild -quiet -project StytchDemo/StytchDemo.xcodeproj -scheme 'StytchDemo (Server)' -derivedDataPath #{File.join(project_root, '.build')} -configuration release build")
    # TODO: - pass through port to server
    system("DEMO_SERVER_SCRIPT=1 APP_ID=#{app_id} #{File.join(project_root, '.build/Build/Products/Release/StytchDemo\ \(Server\)')} #{port}")
  end

  def update_public_token_if_needed
    public_token = %x(/usr/libexec/PlistBuddy -c 'print :StytchPublicToken' #{File.join(File.dirname(demo_project_file), "Client/Shared/StytchConfiguration.plist")}).strip
    if public_token == "public-token-example"
      puts 'You need to update your public token. Paste a token from https://stytch.com/dashboard/api-keys here:'.yellow
      public_token = STDIN.gets.chomp
      system("/usr/libexec/PlistBuddy -c 'set :StytchPublicToken #{public_token}' #{File.join(File.dirname(demo_project_file), "Client/Shared/StytchConfiguration.plist")}")
    end
  end

  def project_root
    File.expand_path('../../', __FILE__)
  end

  def demo_project_file
    File.join(project_root, 'StytchDemo/StytchDemo.xcodeproj')
  end

  def ngrok_wildcard_url
    'https://*.ngrok.io'
  end
end

case ARGV[0]
when 'start'
  begin
    # TODO: allow passing port through optparse
    Runner.new.run(port: 8080)
  rescue Interrupt
    Runner.new.cleanup
  end
when 'cleanup'
  Runner.new.cleanup
when 'bootstrap'
  system('brew install ngrok')
end
