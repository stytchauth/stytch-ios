{% for type in types.all %}
{% for method in type.methods where method.annotations.AsyncVariants %}
{% for methodName in method.name|split:"(" %}
{% if forloop.first %}
// sourcery:file:StytchCore/Generated/{{ type.name}}+AsyncVariants.generated.swift
{% macro methodCall %}{{ methodName }}(parameters: {{ method.parameters.0.typeName }}){% endmacro %}
{% macro returnType %}{{ method.parameters.1.typeName|replace:"@escaping Completion<",""|replace:">","" }}{% endmacro %}
{% macro asyncFunction %}
    func {% call methodCall %} async throws -> {% call returnType %} {
        try await withCheckedThrowingContinuation { continuation in
            self.{{ methodName }}(parameters: parameters, completion: continuation.resume)
        }
    }
{% endmacro %}
{% macro methodDocs %}
{% for commentLine in method.documentation %}
{% if commentLine|!contains:"completion" %}
    /// {{ commentLine }}
{% else %}
    /// {{ commentLine|replace:"completion","return" }}
{% endif %}
{% endfor %}
{% endmacro %}

// MARK: - {{ methodName }} Combine
#if canImport(Combine)
import Combine

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
public extension {{ type.name }} {
    {% call methodDocs %}
    func {% call methodCall %} -> AnyPublisher<{% call returnType %}, Error> {
        return Deferred { 
            Future({ promise in
                self.{{ methodName }}(parameters: parameters, completion: promise)
            })
        }
        .eraseToAnyPublisher()
    }
}
#endif

// MARK: - {{ methodName }} Async/Await
#if compiler(>=5.5) && canImport(_Concurrency)
public extension {{ type.name }} {
    #if compiler(>=5.5.2)
    {% call methodDocs %}
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.2, *)
    {% call asyncFunction %}
    #else
    {% call methodDocs %}
    @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
    {% call asyncFunction %}
    #endif
}
#endif
// sourcery:end
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}
