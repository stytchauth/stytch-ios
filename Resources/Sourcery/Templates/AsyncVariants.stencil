{% for type in types.all %}
{% for method in type.methods where method.annotations.AsyncVariants %}
{% set methodName %}{% for value in method.name|split:"(" %}{% if forloop.first %}{{ value }}{% endif %}{% endfor %}{% endset %}
// sourcery:file:StytchCore/Generated/{{ type.name }}.{{ methodName }}+AsyncVariants.generated.swift
import Combine
import Foundation

{% set excludeWatchOS %}#if !os(watchOS){% endset %}
{% if type.annotations.ExcludeWatchOS %}{{ excludeWatchOS }}{% elif method.annotations.ExcludeWatchOS %}{{ excludeWatchOS }}{% endif %}
{% for attribute in type.attributes.available %}{{ attribute }}{% endfor %}
public extension {{ type.name }} {
{% set methodKeywords %}{% if method.isClass %}class {% elif method.isStatic %}static {% endif %}func{% endset %}
{% set methodDeclaration %}{{ methodName }}({% for parameter in method.parameters %}{{ parameter.asSource }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endset %}
{% set methodCallParams %}{% for parameter in method.parameters %}{%if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endset %}
{% set returnType %}{{ method.returnTypeName }}{% endset %}
{% set methodDocs %}
{% for commentLine in method.documentation %}
    /// {{ commentLine }}
{% endfor %}
{% endset %}
    {{ methodDocs }}
    {% for attribute in method.attributes.available %}{{ attribute }}{% endfor %}
    {{ methodKeywords }} {{ methodDeclaration }}{% if method.parameters.count != 0 %}, {% endif %}completion: @escaping Completion<{{ returnType }}>) {
        Task {
            do {
                completion(.success(try await {{ methodName }}({{ methodCallParams }})))
            } catch {
                completion(.failure(error))
            }
        }
    }

    {{ methodDocs }}
    {% for attribute in method.attributes.available %}{{ attribute }}{% endfor %}
    {{ methodKeywords }} {{ methodDeclaration }}) -> AnyPublisher<{{ returnType }}, Error> {
        return Deferred {
            Future({ promise in
                Task {
                    do {
                        promise(.success(try await {{ methodName }}({{ methodCallParams }})))
                    } catch {
                        promise(.failure(error))
                    }
                }
            })
        }
        .eraseToAnyPublisher()
    }
}
{% set excludeWatchOS %}#endif{% endset %}
{% if type.annotations.ExcludeWatchOS %}{{ excludeWatchOS }}{% elif method.annotations.ExcludeWatchOS %}{{ excludeWatchOS }}{% endif %}

// sourcery:end
{% endfor %}
{% endfor %}
